defmodule :"Amps.Gateway<%= if env do%>.<%= env %><% end %>.<%= name %>" do
  import Plug.Conn
  alias Amps.DB
  use Plug.Router
  require Logger
  plug(CORSPlug)

  plug(Plug.Parsers,
    parsers: [:urlencoded, :multipart],
    pass: ["*/*"],
    length: Amps.Defaults.get("max_upload", 15_000_000_000),
    json_decoder: Jason
  )

  plug(Plug.Logger, log: :debug)

  plug(:match)
  plug(:dispatch)

  def init(options) do
    opts = Keyword.get(options, :opts, [])


    env = Keyword.get(options, :env, "")
    %{env: env, opts: opts}
    #    Map.put(options, "test", "test")
  end

  def call(conn, opts) do
    put_private(conn, :env, opts.env)
    |> put_private(:opts, opts.opts)
    |> super(opts)
  end


  defp get_header_metadata(conn, msg) do
    Enum.filter(conn.req_headers, fn x ->
      String.starts_with?(elem(x, 0), "amps_")
    end)
    |> Enum.map(fn {x, y} ->
      key = String.replace(x, "amps_", "")
      {key, y}
    end)
    |> Enum.into(msg)
  end

  defp get_body_metadata(conn, msg, stime, temp) do
    msgid = msg["msgid"]
    size =
      Enum.find(conn.req_headers, -1, fn x ->
        String.starts_with?(elem(x, 0), "content-length")
      end)

    nmsg = Map.merge(msg, %{
      "fpath" => temp,
      "temp" => "true",
      "stime" => stime,
      "fsize" => elem(size, 1),
      "ftime" => AmpsUtil.gettime()
    })

    if nmsg["fname"] == "" || nmsg["fname"] == nil do
      fname =
        if conn.body_params() != %Plug.Conn.Unfetched{aspect: :body_params} do
          if conn.body_params()["upload"] do
            if Map.has_key?(conn.body_params()["upload"], :filename) do
              conn.body_params()["upload"].filename
            end
          end
        end

      if fname do
        Map.put(nmsg, "fname", fname)
      else
        Map.put(nmsg, "fname", "message.dat")
      end
    else
      nmsg
    end
  end

  defp write_file(conn, fpath) do
    # consider data pass-thru without using file
    case :file.open(fpath, [:write, :raw, :delayed_write]) do
      {:ok, file} ->
        read_body(conn, [length: 0, read_length: 16_640], file)

      #        read_body(conn, [], file)
      {:error, reason} ->
        {:error, reason}
    end
  end

  defp read_body(conn, opts, f) do
    case conn.body_params() do
      %Plug.Conn.Unfetched{aspect: :body_params} ->
        case Plug.Conn.read_body(conn, opts) do
          {:ok, binary, conn} ->
            :file.write(f, binary)
            :file.close(f)
            {:ok, conn}

          {:more, binary, conn} ->
            :file.write(f, binary)
            read_body(conn, opts, f)

          {:error, term} ->
            {:error, term}
        end

      res ->
        {_key, %Plug.Upload{path: path}} = Enum.at(res, 0)
        :file.copy(path, f)
        :file.close(f)
        {:ok, conn}
    end
  end

  def handle_route(conn, route, user) do
    msgid = AmpsUtil.get_id()
    stime = AmpsUtil.gettime()
    IO.inspect(conn)
    msg = %{
      "msgid" => msgid,
      "stime" => stime,
      "path_params" => conn.path_params,
      "query_params" => conn.query_params,
      "service" => conn.private.opts["name"],
      "request_path" => conn.request_path,
      "route_path" => route["path"],
      "user" => user,
      "method" => conn.method,
      "synch" => true
    }
    {msg, sid} = AmpsEvents.start_session(msg, %{"service" => msg["service"]}, conn.private.env)


    topic =
      AmpsUtil.env_topic(
        "amps.svcs.#{conn.private.opts["name"]}.#{conn.method}#{route["path"]}",
        conn.private.env
      )

    msg = Map.merge(msg, get_header_metadata(conn, msg))

    if conn.method == "POST" || conn.method == "PUT" do
      temp_file = AmpsUtil.tempdir() <> "/" <> msgid

      msg = get_body_metadata(conn, msg, stime, temp_file)

      AmpsEvents.send(
        msg,
        %{
          "output" => topic
        },
        %{},
        conn.private.env
      )

      case write_file(conn, temp_file) do
        {:error, reason} ->
          # cannot write temp file (500 internal service error)
          handle_error(conn, reason, msg)

        {:ok, conn} ->
          # temp file written okay

          do_action(msg, route, conn)
      end
    else
      AmpsEvents.send(
        msg,
        %{
          "output" => topic
        },
        %{},
        conn.private.env
      )

      do_action(msg, route, conn)
    end
  end

  def do_action(msg, route, conn) do
    actparms =
      DB.find_by_id(AmpsUtil.index(conn.private.env, "actions"), route["action"])

    conn =
      if actparms do
        try do
          AmpsEvents.send_history(
            AmpsUtil.env_topic("amps.events.action", conn.private.env),
            "message_events",
            msg,
            %{
              "status" => "started",
            }
          )

          handler = AmpsUtil.get_env_parm(:actions, String.to_atom(actparms["type"]))
          case handler.run(Map.drop(msg, ["synch"]), actparms, {%{}, conn.private.env}) do
            {:ok, res} ->
              AmpsEvents.send_history(
                AmpsUtil.env_topic("amps.events.action", conn.private.env),
                "message_events",
                msg,
                %{
                  "status" => "completed",
                  "action" => actparms["name"]
                }
              )

              if Map.has_key?(res, "response") do
                response = res["response"]
                code =
                try do
                  if is_integer(response["code"]) do
                    Plug.Conn.Status.reason_atom(response["code"])
                    response["code"]
                  else
                    200
                  end
                rescue e ->
                  200
                end


                conn =
                  if Map.has_key?(response, "headers") do
                    Enum.reduce(response["headers"], conn, fn {k, v}, conn ->
                      put_resp_header(conn, k, v)
                    end)
                  else
                    conn
                  end

                case response do
                  %{"data" => data} ->
                    send_resp(conn, code, Poison.encode!(data))

                  %{"fpath" => fpath} ->
                    Plug.Conn.send_file(conn, code, fpath)
                end
              else
                send_resp(conn, 200, Poison.encode!(%{"status" => "completed"}))
              end

            {:send, events} ->


              case Amps.AsyncResponder.register(events, actparms, conn.private.env, conn.private.opts["timeout"] || 15000) do
                :pending ->
                  AmpsEvents.send_history(
                    AmpsUtil.env_topic("amps.events.action", conn.private.env),
                    "message_events",
                    msg,
                    %{
                      "status" => "completed",
                      "action" => actparms["name"]
                    }
                  )
                  topics =
                  if is_list(actparms["output"]) do
                    actparms["output"]
                  else
                    [actparms["output"]]
                  end

                  topics = Enum.reduce(topics, "", fn topic, acc ->
                    acc <> "\t" <> topic <> "\n"
                  end)

                  send_resp(conn, 202, "Action performed successfully\nMessage sent to topic(s):\n" <> topics)
                {:resp, responses} ->
                  AmpsEvents.send_history(
                    AmpsUtil.env_topic("amps.events.action", conn.private.env),
                    "message_events",
                    msg,
                    %{
                      "status" => "completed",
                      "action" => actparms["name"]
                    }
                  )
                  responses = Enum.reduce(responses, %{}, fn {action, msgid, response}, acc ->
                    if is_map(response) do
                      if Map.has_key?(response, "async") do
                        async = response["async"]
                        [{key, data}] = Enum.to_list(async)
                        if Map.has_key?(acc, key) do
                          if is_list(acc[key]) do
                            Map.put(acc, key, acc[key] ++ [data])
                          else
                            Map.put(acc, key, [acc[key]] ++ [data])
                          end
                        else
                          Map.put(acc, key, data)
                        end

                      else
                        Map.merge(acc, %{action => %{msgid =>response}})

                      end
                    else
                      Map.merge(acc, %{action => %{msgid =>response}})

                    end
                  end)
                  send_resp(conn, 200, Jason.encode!(responses))

              end

          end
        rescue
          e ->
            handle_error(conn, e, msg)
        end
      else
        handle_error(conn, "Action not found", msg)
      end

    AmpsEvents.end_session(msg["sid"], conn.private.env)
    conn
  end

  def handle_error(conn, e, msg) do
    Logger.error(e)

    AmpsEvents.send_history(
      AmpsUtil.env_topic("amps.events.action", conn.private.env),
      "message_events",
      msg,
      %{
        status: "failed",
        reason: inspect(e)
      }
    )

    case e do
      %ErlangError{original: {:python, type, message, stacktrace}} ->
        send_resp(conn, 500, "#{type} #{message}")

      _ ->
        send_resp(conn, 500, Exception.message(e))
    end
  end

  defp myauth(conn) do
    case Plug.BasicAuth.parse_basic_auth(conn) do
      {id, secret} ->
        case AmpsPortal.Util.verify_token(id, secret, conn.private.env) do
          nil ->
            {:error, "Access Denied"}

          user ->
            {:ok, user["username"]}
        end

      :error ->
        {:error, "Authorization denied - invalid HTTP auth header"}
    end
  end

  <%= for %{"method" => method, "path" => path, "action" => action} <- router do %>
  <%= method %> "<%= path %>" do
    case myauth(conn) do
      {:ok, user} ->
        handle_route(conn, %{"method" => "<%= method %>", "path" => "<%= path %>", "action" => "<%= action %>"}, user)

      {:error, reason} ->
        send_resp(conn, 401, Poison.encode!(%{error: reason}))
    end
  end
  <% end %>
  match _ do
    send_resp(conn, 400, "HTTP Request Not Supported")
  end
end
